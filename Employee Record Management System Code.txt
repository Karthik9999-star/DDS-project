#include <stdio.h>
#include <string.h>

#define SIZE 3   // fixed number of employees

// Structure for employee
struct Employee {
    int id;
    char name[50];
    char dob[15];
    char phone[15];
    int joinYear;
};

// Function prototypes
void inputEmployees(struct Employee emp[]);
void displayEmployees(struct Employee emp[]);
void searchByName(struct Employee emp[], char name[]);
void searchByYear(struct Employee emp[], int year);
void sortByID(struct Employee emp[]);
void sortByYear(struct Employee emp[]);

int main() {
    struct Employee emp[SIZE];
    int choice, year;
    char name[50];

    // Step 1: Input employee records
    inputEmployees(emp);

    // Menu for operations
    do {
        printf("\n===== Employee Record Management System =====\n");
        printf("1. Display Employees\n");
        printf("2. Search by Name\n");
        printf("3. Search by Joining Year\n");
        printf("4. Sort by Employee ID\n");
        printf("5. Sort by Joining Year\n");
        printf("0. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        getchar(); // clear newline

        switch (choice) {
            case 1:
                displayEmployees(emp);
                break;
            case 2:
                printf("Enter full name: ");
                fgets(name, sizeof(name), stdin);
                name[strcspn(name, "\n")] = '\0'; // remove newline
                searchByName(emp, name);
                break;
            case 3:
                printf("Enter joining year: ");
                scanf("%d", &year);
                searchByYear(emp, year);
                break;
            case 4:
                sortByID(emp);
                displayEmployees(emp);
                break;
            case 5:
                sortByYear(emp);
                displayEmployees(emp);
                break;
            case 0:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 0);

    return 0;
}

// Take input for employees
void inputEmployees(struct Employee emp[]) {
    for (int i = 0; i < SIZE; i++) {
        printf("\nEnter details of Employee %d:\n", i + 1);
        printf("ID: ");
        scanf("%d", &emp[i].id);
        getchar();

        printf("Name: ");
        fgets(emp[i].name, sizeof(emp[i].name), stdin);
        emp[i].name[strcspn(emp[i].name, "\n")] = '\0';

        printf("Date of Birth (DD/MM/YYYY): ");
        scanf("%s", emp[i].dob);

        printf("Phone: ");
        scanf("%s", emp[i].phone);

        printf("Joining Year: ");
        scanf("%d", &emp[i].joinYear);
    }
}

// Display all employees
void displayEmployees(struct Employee emp[]) {
    printf("\nEmployee Records:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("ID: %d | Name: %s | DOB: %s | Phone: %s | Joined: %d\n",
               emp[i].id, emp[i].name, emp[i].dob, emp[i].phone, emp[i].joinYear);
    }
}

// Search employee by name
void searchByName(struct Employee emp[], char name[]) {
    int found = 0;
    for (int i = 0; i < SIZE; i++) {
        if (strcmp(emp[i].name, name) == 0) {
            printf("Found: ID=%d | Name=%s | DOB=%s | Phone=%s | Joined=%d\n",
                   emp[i].id, emp[i].name, emp[i].dob, emp[i].phone, emp[i].joinYear);
            found = 1;
        }
    }
    if (!found) printf("No employee found with name %s\n", name);
}

// Search employees by joining year
void searchByYear(struct Employee emp[], int year) {
    int found = 0;
    for (int i = 0; i < SIZE; i++) {
        if (emp[i].joinYear == year) {
            printf("Found: ID=%d | Name=%s | DOB=%s | Phone=%s | Joined=%d\n",
                   emp[i].id, emp[i].name, emp[i].dob, emp[i].phone, emp[i].joinYear);
            found = 1;
        }
    }
    if (!found) printf("No employees joined in %d\n", year);
}

// Sort employees by ID (ascending)
void sortByID(struct Employee emp[]) {
    struct Employee temp;
    for (int i = 0; i < SIZE - 1; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            if (emp[i].id > emp[j].id) {
                temp = emp[i];
                emp[i] = emp[j];
                emp[j] = temp;
            }
        }
    }
    printf("Employees sorted by ID!\n");
}

// Sort employees by joining year (ascending)
void sortByYear(struct Employee emp[]) {
    struct Employee temp;
    for (int i = 0; i < SIZE - 1; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            if (emp[i].joinYear > emp[j].joinYear) {
                temp = emp[i];
                emp[i] = emp[j];
                emp[j] = temp;
            }
        }
    }
    printf("Employees sorted by Joining Year!\n");
}